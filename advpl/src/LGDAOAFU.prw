#include 'protheus.ch'
#include 'parmtype.ch'

         			
user function DAFUCad(FILIAL,PROJET,REVISA,TAREFA,DATAP,HORAI,HORAF,HQUANT,RECURS,PREREC,CUSTO1,OBS,UPERC,NUMSEQ,COD,LOCALP,CTRRVS,CODMEM,CUSTO2,CUSTO3,CUSTO4,CUSTO5,TPREAL,DOCUME,ITEM,ID,TPHORA)
	if(FILIAL = nil, "", FILIAL)
	if(PROJET = nil, "", PROJET)
	if(REVISA = nil, "", REVISA)
	if(TAREFA = nil, "", TAREFA)
	if(RECURS = nil, "", RECURS)
	if(DATAP = nil, "", DATAP)
	if(HORAI = nil, "", HORAI)
	if(HORAF = nil, "", HORAF)
	if(HQUANT = nil, "", HQUANT)
	if(UPERC = nil, "", UPERC)
	if(NUMSEQ = nil, "", NUMSEQ)
	if(COD = nil, "", COD)
	if(LOCALP = nil, "", LOCALP)
	if(CTRRVS = nil, "", CTRRVS)
	if(CODMEM = nil, "", CODMEM)
	if(OBS = nil, "", OBS)
	if(CUSTO1 = nil, "", CUSTO1)
	if(CUSTO2 = nil, "", CUSTO2)
	if(CUSTO3 = nil, "", CUSTO3)
	if(CUSTO4 = nil, "", CUSTO4)
	if(CUSTO5 = nil, "", CUSTO5)
	if(TPREAL = nil, "", TPREAL)
	if(DOCUME = nil, "", DOCUME)
	if(PREREC = nil, "", PREREC)
	if(ITEM = nil, "", ITEM)
	if(ID = nil, "", ID)
	if(TPHORA = nil, "", TPHORA)

	FILIAL := ALLTRIM(FILIAL)
	PROJET := ALLTRIM(PROJET)
	REVISA := ALLTRIM(REVISA)
	TAREFA := ALLTRIM(TAREFA)
	RECURS := ALLTRIM(RECURS)
	DATAP := ALLTRIM(DATAP)
	HORAI := ALLTRIM(HORAI)
	HORAF := ALLTRIM(HORAF)
	HQUANT := ALLTRIM(HQUANT)
	UPERC := ALLTRIM(UPERC)
	NUMSEQ := ALLTRIM(NUMSEQ)
	COD := ALLTRIM(COD)
	LOCALP := ALLTRIM(LOCALP)
	CTRRVS := ALLTRIM(CTRRVS)
	CODMEM := ALLTRIM(CODMEM)
	OBS := ALLTRIM(OBS)
	CUSTO1 := ALLTRIM(CUSTO1)
	CUSTO2 := ALLTRIM(CUSTO2)
	CUSTO3 := ALLTRIM(CUSTO3)
	CUSTO4 := ALLTRIM(CUSTO4)
	CUSTO5 := ALLTRIM(CUSTO5)
	TPREAL := ALLTRIM(TPREAL)
	DOCUME := ALLTRIM(DOCUME)
	PREREC := ALLTRIM(PREREC)
	ITEM := ALLTRIM(ITEM)
	ID := ALLTRIM(ID)
	TPHORA := ALLTRIM(TPHORA)

	exceptionList := {}
	exceptionList := u_DAFUVld(FILIAL,CTRRVS,PROJET,REVISA,TAREFA,RECURS,DATAP)
	if len(exceptionList)>0
		CONOUT("PROBLEMA DE VALIDACAO NA TABELA AFU")
		return "0"
	endif

	DATAP := u_strToDate(DATAP) //Funcao de conversao avancada no LIGDFILTER.prw

	DBSELECTAREA("AFU")
	RECLOCK("AFU",.T.)
	AFU->AFU_FILIAL := FILIAL
	AFU->AFU_PROJET := PROJET
	AFU->AFU_REVISA := REVISA
	AFU->AFU_TAREFA := TAREFA
	AFU->AFU_RECURS := RECURS
	AFU->AFU_DATA := DATAP
	AFU->AFU_HORAI := HORAI
	AFU->AFU_HORAF := HORAF
	AFU->AFU_HQUANT := HQUANT
	AFU->AFU_UPERC := UPERC
	AFU->AFU_NUMSEQ := NUMSEQ
	AFU->AFU_COD := COD
	AFU->AFU_LOCAL := LOCALP
	AFU->AFU_CTRRVS := CTRRVS
	AFU->AFU_CODMEM := CODMEM
	AFU->AFU_OBS := OBS
	AFU->AFU_CUSTO1 := CUSTO1
	AFU->AFU_CUSTO2 := CUSTO2
	AFU->AFU_CUSTO3 := CUSTO3
	AFU->AFU_CUSTO4 := CUSTO4
	AFU->AFU_CUSTO5 := CUSTO5
	AFU->AFU_TPREAL := TPREAL
	AFU->AFU_DOCUME := DOCUME
	AFU->AFU_PREREC := PREREC
	AFU->AFU_ITEM := ITEM
	AFU->AFU_ID := ID
	AFU->AFU_TPHORA := TPHORA
	MSUNLOCK()
return 

user function DAFUAlter(FILIAL,PROJET,REVISA,TAREFA,RECURS,DATAP,HORAI,HORAF,HQUANT,UPERC,NUMSEQ,COD,LOCALP,CTRRVS,CODMEM,OBS,CUSTO1,CUSTO2,CUSTO3,CUSTO4,CUSTO5,TPREAL,DOCUME,PREREC,ITEM,ID,TPHORA)
	if(FILIAL = nil, "", FILIAL)
	if(PROJET = nil, "", PROJET)
	if(REVISA = nil, "", REVISA)
	if(TAREFA = nil, "", TAREFA)
	if(RECURS = nil, "", RECURS)
	if(DATAP = nil, "", DATAP)
	if(HORAI = nil, "", HORAI)
	if(HORAF = nil, "", HORAF)
	if(HQUANT = nil, "", HQUANT)
	if(UPERC = nil, "", UPERC)
	if(NUMSEQ = nil, "", NUMSEQ)
	if(COD = nil, "", COD)
	if(LOCALP = nil, "", LOCALP)
	if(CTRRVS = nil, "", CTRRVS)
	if(CODMEM = nil, "", CODMEM)
	if(OBS = nil, "", OBS)
	if(CUSTO1 = nil, "", CUSTO1)
	if(CUSTO2 = nil, "", CUSTO2)
	if(CUSTO3 = nil, "", CUSTO3)
	if(CUSTO4 = nil, "", CUSTO4)
	if(CUSTO5 = nil, "", CUSTO5)
	if(TPREAL = nil, "", TPREAL)
	if(DOCUME = nil, "", DOCUME)
	if(PREREC = nil, "", PREREC)
	if(ITEM = nil, "", ITEM)
	if(ID = nil, "", ID)
	if(TPHORA = nil, "", TPHORA)

	FILIAL := ALLTRIM(FILIAL)
	PROJET := ALLTRIM(PROJET)
	REVISA := ALLTRIM(REVISA)
	TAREFA := ALLTRIM(TAREFA)
	RECURS := ALLTRIM(RECURS)
	DATAP := ALLTRIM(DATAP)
	HORAI := ALLTRIM(HORAI)
	HORAF := ALLTRIM(HORAF)
	HQUANT := ALLTRIM(HQUANT)
	UPERC := ALLTRIM(UPERC)
	NUMSEQ := ALLTRIM(NUMSEQ)
	COD := ALLTRIM(COD)
	LOCALP := ALLTRIM(LOCALP)
	CTRRVS := ALLTRIM(CTRRVS)
	CODMEM := ALLTRIM(CODMEM)
	OBS := ALLTRIM(OBS)
	CUSTO1 := ALLTRIM(CUSTO1)
	CUSTO2 := ALLTRIM(CUSTO2)
	CUSTO3 := ALLTRIM(CUSTO3)
	CUSTO4 := ALLTRIM(CUSTO4)
	CUSTO5 := ALLTRIM(CUSTO5)
	TPREAL := ALLTRIM(TPREAL)
	DOCUME := ALLTRIM(DOCUME)
	PREREC := ALLTRIM(PREREC)
	ITEM := ALLTRIM(ITEM)
	ID := ALLTRIM(ID)
	TPHORA := ALLTRIM(TPHORA)



	exceptionList := {}
	exceptionList := u_DAFUVld(FILIAL,CTRRVS,PROJET,REVISA,TAREFA,RECURS,DATAP)
	if len(exceptionList)>0
		CONOUT("PROBLEMA DE VALIDACAO NA TABELA AFU")
		return "0"
	endif

	DATAP := u_strToDate(DATAP) //Funcao de conversao avancada no LIGDFILTER.prw

	DBSELECTAREA("AFU")
	DBSETORDER(INSIRA_MANUALMENTE)
	IF DBSEEK(INSIRA_MANUALMENTE)
		RECLOCK("AFU",.F.)
		AFU->AFU_FILIAL := FILIAL
		AFU->AFU_PROJET := PROJET
		AFU->AFU_REVISA := REVISA
		AFU->AFU_TAREFA := TAREFA
		AFU->AFU_RECURS := RECURS
		AFU->AFU_DATA := DATAP
		AFU->AFU_HORAI := HORAI
		AFU->AFU_HORAF := HORAF
		AFU->AFU_HQUANT := HQUANT
		AFU->AFU_UPERC := UPERC
		AFU->AFU_NUMSEQ := NUMSEQ
		AFU->AFU_COD := COD
		AFU->AFU_LOCAL := LOCALP
		AFU->AFU_CTRRVS := CTRRVS
		AFU->AFU_CODMEM := CODMEM
		AFU->AFU_OBS := OBS
		AFU->AFU_CUSTO1 := CUSTO1
		AFU->AFU_CUSTO2 := CUSTO2
		AFU->AFU_CUSTO3 := CUSTO3
		AFU->AFU_CUSTO4 := CUSTO4
		AFU->AFU_CUSTO5 := CUSTO5
		AFU->AFU_TPREAL := TPREAL
		AFU->AFU_DOCUME := DOCUME
		AFU->AFU_PREREC := PREREC
		AFU->AFU_ITEM := ITEM
		AFU->AFU_ID := ID
		AFU->AFU_TPHORA := TPHORA
		MSUNLOCK()
	endif
return 

user function DAFUVld(FILIAL,CTRRVS,PROJET,REVISA,TAREFA,RECURS,DATAP)
	exceptionList := {}
	FILIAL := ALLTRIM(FILIAL)
	CTRRVS := ALLTRIM(CTRRVS)
	PROJET := ALLTRIM(PROJET)
	REVISA := ALLTRIM(REVISA)
	TAREFA := ALLTRIM(TAREFA)
	RECURS := ALLTRIM(RECURS)
	DATAP := ALLTRIM(DATAP)

	if((FILIAL = nil .or. FILIAL==""), aAdd(exceptionList,"FILIAL"), .F.)
	if((CTRRVS = nil .or. CTRRVS==""), aAdd(exceptionList,"CTRRVS"), .F.)
	if((PROJET = nil .or. PROJET==""), aAdd(exceptionList,"PROJET"), .F.)
	if((REVISA = nil .or. REVISA==""), aAdd(exceptionList,"REVISA"), .F.)
	if((TAREFA = nil .or. TAREFA==""), aAdd(exceptionList,"TAREFA"), .F.)
	if((RECURS = nil .or. RECURS==""), aAdd(exceptionList,"RECURS"), .F.)
	if((DATAP = nil .or. DATAP==""), aAdd(exceptionList,"DATA"), .F.)

	if(len(exceptionList)>0)
		CONOUT("PROBLEMA DE VALIDACAO NA TABELA AFU, CAMPOS:")
		for i:=1 to len(exceptionList)
		 	CONOUT(exceptionList[i])
		next        
	endif	
return exceptionList